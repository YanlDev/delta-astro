// src/scripts/telegram-api.js - VERSI√ìN CORREGIDA
export class TelegramAPI {
  constructor() {
    // Obtener credenciales de variables de entorno o configuraci√≥n
    this.config = {
      botToken: import.meta.env.PUBLIC_TELEGRAM_BOT_TOKEN || this.getFromWindow('TELEGRAM_BOT_TOKEN'),
      chatId: import.meta.env.PUBLIC_TELEGRAM_CHAT_ID || this.getFromWindow('TELEGRAM_CHAT_ID')
    };
    
    // Configuraci√≥n de respaldo para desarrollo
    if (!this.config.botToken || !this.config.chatId) {
      console.warn('‚ö†Ô∏è Credenciales de Telegram no configuradas. Usando modo simulaci√≥n.');
      this.simulationMode = true;
    } else {
      this.simulationMode = false;
    }
  }

  // M√©todo auxiliar para obtener variables del objeto window
  getFromWindow(varName) {
    return typeof window !== 'undefined' && window[varName] ? window[varName] : '';
  }

  /**
   * Env√≠a todos los datos del formulario a Telegram
   * @param {Object} formData - Datos del formulario
   */
  async sendFormData(formData) {
    // Modo simulaci√≥n para desarrollo
    if (this.simulationMode) {
      console.log('üì® MODO SIMULACI√ìN - Datos del formulario:', formData);
      
      // Simular delay de red
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Simular √©xito
      console.log('‚úÖ Formulario enviado exitosamente (simulaci√≥n)');
      return { ok: true, message: 'Simulaci√≥n exitosa' };
    }

    try {
      // Validar configuraci√≥n antes de enviar
      if (!this.validateConfig()) {
        throw new Error('Configuraci√≥n de Telegram inv√°lida');
      }

      // Enviar mensaje principal
      await this.sendMessage(this.formatMessage(formData));
      
      // Enviar documentos (soporte para m√∫ltiples archivos)
      if (formData.documentos && formData.documentos.length > 0) {
        for (let i = 0; i < formData.documentos.length; i++) {
          const documento = formData.documentos[i];
          await this.sendDocument(
            documento, 
            `Documento ${i + 1}/${formData.documentos.length} - ${formData.nombre} ${formData.apellidos}`
          );
        }
      } else if (formData.documento) {
        // Compatibilidad con versi√≥n anterior
        await this.sendDocument(
          formData.documento, 
          `Documento de ${formData.nombre} ${formData.apellidos}`
        );
      }
      
      // Enviar imagen de pago si existe
      if (formData.imagenPago) {
        await this.sendPhoto(
          formData.imagenPago, 
          `Comprobante de pago - ${formData.nombre} ${formData.apellidos}`
        );
      }
      
      return { ok: true, message: 'Enviado correctamente' };
      
    } catch (error) {
      console.error('‚ùå Error en TelegramAPI:', error);
      throw new Error(`Error al enviar los datos: ${error.message}`);
    }
  }

  /**
   * Formatea los datos del formulario en un mensaje legible
   * @param {Object} formData - Datos del formulario
   * @returns {string} - Mensaje formateado
   */
  formatMessage(formData) {
    const tipoReporteText = formData.tipoReporte === 'unico' 
      ? 'Reporte √önico (S/7)' 
      : 'Pack de 3 Reportes (S/15)';
    
    const metodoEntregaText = formData.metodoEntrega === 'whatsapp' 
      ? 'WhatsApp' 
      : 'Correo Electr√≥nico';

    // Contar documentos
    const numDocumentos = formData.documentos ? formData.documentos.length : (formData.documento ? 1 : 0);
    
    return `
üÜï *NUEVA SOLICITUD DE REVISI√ìN TURNITIN*

üë§ *Datos del Cliente:*
‚Ä¢ Nombre: ${formData.nombre} ${formData.apellidos}
‚Ä¢ Tel√©fono: ${formData.telefono}
‚Ä¢ Email: ${formData.correo}

üìä *Servicio Solicitado:*
‚Ä¢ Tipo: ${tipoReporteText}
‚Ä¢ Entrega por: ${metodoEntregaText}

üìÑ *Archivos:*
‚Ä¢ Documentos: ${numDocumentos} archivo(s)
‚Ä¢ Comprobante: ${formData.imagenPago ? '‚úÖ Adjuntado' : '‚ùå No adjuntado'}

üí¨ *Mensaje Adicional:*
${formData.mensaje || 'Sin mensaje adicional'}

‚è∞ *Fecha:* ${new Date().toLocaleString('es-PE')}
    `.trim();
  }

  /**
   * Env√≠a un mensaje de texto a Telegram
   * @param {string} message - Mensaje a enviar
   */
  async sendMessage(message) {
    const url = `https://api.telegram.org/bot${this.config.botToken}/sendMessage`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: this.config.chatId,
        text: message,
        parse_mode: 'Markdown'
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`Error al enviar mensaje: ${response.status} - ${errorData.description || 'Error desconocido'}`);
    }
    
    return response.json();
  }

  /**
   * Env√≠a un documento a Telegram
   * @param {File} file - Archivo a enviar
   * @param {string} caption - Descripci√≥n del archivo
   */
  async sendDocument(file, caption) {
    const url = `https://api.telegram.org/bot${this.config.botToken}/sendDocument`;
    
    const formDataToSend = new FormData();
    formDataToSend.append('chat_id', this.config.chatId);
    formDataToSend.append('document', file);
    formDataToSend.append('caption', caption);
    
    const response = await fetch(url, {
      method: 'POST',
      body: formDataToSend
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`Error al enviar documento: ${response.status} - ${errorData.description || 'Error desconocido'}`);
    }
    
    return response.json();
  }

  /**
   * Env√≠a una imagen a Telegram
   * @param {File} file - Imagen a enviar
   * @param {string} caption - Descripci√≥n de la imagen
   */
  async sendPhoto(file, caption) {
    const url = `https://api.telegram.org/bot${this.config.botToken}/sendPhoto`;
    
    const formDataToSend = new FormData();
    formDataToSend.append('chat_id', this.config.chatId);
    formDataToSend.append('photo', file);
    formDataToSend.append('caption', caption);
    
    const response = await fetch(url, {
      method: 'POST',
      body: formDataToSend
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`Error al enviar imagen: ${response.status} - ${errorData.description || 'Error desconocido'}`);
    }
    
    return response.json();
  }

  /**
   * Valida la configuraci√≥n del bot
   * @returns {boolean} - True si la configuraci√≥n es v√°lida
   */
  validateConfig() {
    if (!this.config.botToken || this.config.botToken.length < 10) {
      console.error('‚ùå Bot token no configurado o inv√°lido');
      return false;
    }
    
    if (!this.config.chatId || this.config.chatId.length < 5) {
      console.error('‚ùå Chat ID no configurado o inv√°lido');
      return false;
    }
    
    console.log('‚úÖ Configuraci√≥n de Telegram v√°lida');
    return true;
  }

  /**
   * Configura las credenciales del bot
   * @param {string} botToken - Token del bot
   * @param {string} chatId - ID del chat
   */
  setConfig(botToken, chatId) {
    this.config.botToken = botToken;
    this.config.chatId = chatId;
    this.simulationMode = false;
    console.log('üîß Configuraci√≥n de Telegram actualizada');
  }
}